
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/21dian/blackJackNetwork.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '2c6e45EypVN9JxU72d7Lcvy', 'blackJackNetwork');
// Script/21dian/blackJackNetwork.js

"use strict";

cc.Class({
  "extends": cc.Component,
  onLoad: function onLoad() {
    this.mainObj = this.node.getComponent('blackJackMain');
    this.playerInfo = require("PlayerInfo").getInstant;
    this.audio = this.node.getComponent('blackJackAudio');
  },
  start: function start() {
    this.url = Lhjconfig.Server_IP + ':13901';
    this.socket = io.connect(this.url);
    this.addEvent();
  },
  addEvent: function addEvent() {
    var _this = this;

    this.socket.on('connected', function () {
      _this.socket.emit('LoginGame', JSON.stringify({
        userid: _this.playerInfo.playerId,
        gametype: null,
        sign: _this.playerInfo.gameSign
      }));
    });
    this.socket.on('loginGameResult', function (data) {
      data = _this.changeResultJSON_Function(data);
      console.log('LoginGameResult:', data);

      _this.socket.emit('LoginRoom');

      _this.mainObj.myCoin = data.Obj.score;
      _this.mainObj.userCoin.string = (data.Obj.score / 100).toFixed(2);
      _this.mainObj.userName.string = data.Obj.nickname;
      Helper.loadHead(data.Obj.headimgurl, function (texture) {
        _this.mainObj.userHead.spriteFrame = texture;
      });
      window.BLACKJACK_LOBBYNET.disconnect();
    });
    this.socket.on('LoginRoomResult', function (data) {
      data = _this.changeResultJSON_Function(data);
      console.log('LoginRoomResult', data);
    });
    this.socket.on('lotteryResult', function (data) {
      data = _this.changeResultJSON_Function(data);
      console.log('lotteryResult:', data);

      if (!!data.ResultCode && data.ResultCode == 1) {
        var _this$mainObj;

        _this.mainObj.betCallBack();

        (_this$mainObj = _this.mainObj).firstDeal.apply(_this$mainObj, [data.zhuang_card[0], ''].concat(data.hand_card));
      }

      if (!data.is_over) {
        _this.scheduleOnce(function () {
          _this.mainObj.playerStatus(data.q_safe ? 1 : 2);
        }, 1.2);
      } else {
        _this.mainObj.overAction(data.zhuang_card, data.win_res, data.user_score);
      }
    });
    this.socket.on('sendCardResult', function (data) {
      data = _this.changeResultJSON_Function(data);
      console.log('sendCardResult', data);

      if (_this.mainObj.playerCardNode.children.length != data.hand_card.length) {
        _this.mainObj.deal('', data.hand_card[data.hand_card.length - 1]);
      }

      if (data.is_fanbei) {
        _this.mainObj.rollCoin();

        _this.mainObj.myCoin = _this.mainObj.myCoin - _this.mainObj.bet;
        _this.mainObj.userCoin.string = (_this.mainObj.myCoin / 100).toFixed(2);
        _this.mainObj.myChipsLbl.string = (_this.mainObj.bet * 2 / 100).toFixed(2);
      }

      if (!data.is_over) {
        _this.scheduleOnce(function () {
          _this.mainObj.playerStatus(3);
        }, 0.3);
      } else {
        _this.mainObj.overAction(data.zhuang_card, data.win_res, data.user_score);
      }
    });
    this.socket.on('buySafeResult', function (data) {
      data = _this.changeResultJSON_Function(data);
      console.log('buySafeResult', data);

      _this.mainObj.playerStatus(2);

      _this.mainObj.rollCoin(true);

      _this.mainObj.myCoin = _this.mainObj.myCoin - _this.mainObj.bet / 2;
      _this.mainObj.userCoin.string = (_this.mainObj.myCoin / 100).toFixed(2);
      _this.mainObj.myChipsLbl.string = (_this.mainObj.bet * 1.5 / 100).toFixed(2);
    });
  },
  changeResultJSON_Function: function changeResultJSON_Function(ret) {
    if (cc.sys.isNative) {
      return JSON.parse(ret);
    }

    return ret;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFwyMWRpYW5cXGJsYWNrSmFja05ldHdvcmsuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsIm9uTG9hZCIsIm1haW5PYmoiLCJub2RlIiwiZ2V0Q29tcG9uZW50IiwicGxheWVySW5mbyIsInJlcXVpcmUiLCJnZXRJbnN0YW50IiwiYXVkaW8iLCJzdGFydCIsInVybCIsIkxoamNvbmZpZyIsIlNlcnZlcl9JUCIsInNvY2tldCIsImlvIiwiY29ubmVjdCIsImFkZEV2ZW50Iiwib24iLCJlbWl0IiwiSlNPTiIsInN0cmluZ2lmeSIsInVzZXJpZCIsInBsYXllcklkIiwiZ2FtZXR5cGUiLCJzaWduIiwiZ2FtZVNpZ24iLCJkYXRhIiwiY2hhbmdlUmVzdWx0SlNPTl9GdW5jdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJteUNvaW4iLCJPYmoiLCJzY29yZSIsInVzZXJDb2luIiwic3RyaW5nIiwidG9GaXhlZCIsInVzZXJOYW1lIiwibmlja25hbWUiLCJIZWxwZXIiLCJsb2FkSGVhZCIsImhlYWRpbWd1cmwiLCJ0ZXh0dXJlIiwidXNlckhlYWQiLCJzcHJpdGVGcmFtZSIsIndpbmRvdyIsIkJMQUNLSkFDS19MT0JCWU5FVCIsImRpc2Nvbm5lY3QiLCJSZXN1bHRDb2RlIiwiYmV0Q2FsbEJhY2siLCJmaXJzdERlYWwiLCJ6aHVhbmdfY2FyZCIsImhhbmRfY2FyZCIsImlzX292ZXIiLCJzY2hlZHVsZU9uY2UiLCJwbGF5ZXJTdGF0dXMiLCJxX3NhZmUiLCJvdmVyQWN0aW9uIiwid2luX3JlcyIsInVzZXJfc2NvcmUiLCJwbGF5ZXJDYXJkTm9kZSIsImNoaWxkcmVuIiwibGVuZ3RoIiwiZGVhbCIsImlzX2ZhbmJlaSIsInJvbGxDb2luIiwiYmV0IiwibXlDaGlwc0xibCIsInJldCIsInN5cyIsImlzTmF0aXZlIiwicGFyc2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxD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ICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxyXG5cclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICB0aGlzLm1haW5PYmogPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KCdibGFja0phY2tNYWluJyk7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJJbmZvID0gcmVxdWlyZShcIlBsYXllckluZm9cIikuZ2V0SW5zdGFudDtcclxuICAgICAgICB0aGlzLmF1ZGlvID0gdGhpcy5ub2RlLmdldENvbXBvbmVudCgnYmxhY2tKYWNrQXVkaW8nKTtcclxuXHJcbiAgICB9LFxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIHRoaXMudXJsID0gTGhqY29uZmlnLlNlcnZlcl9JUCArICc6MTM5MDEnO1xyXG4gICAgICAgIHRoaXMuc29ja2V0ID0gaW8uY29ubmVjdCh0aGlzLnVybCk7XHJcbiAgICAgICAgdGhpcy5hZGRFdmVudCgpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgYWRkRXZlbnQoKSB7XHJcbiAgICAgICAgdGhpcy5zb2NrZXQub24oJ2Nvbm5lY3RlZCcsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zb2NrZXQuZW1pdCgnTG9naW5HYW1lJywgSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgdXNlcmlkOiB0aGlzLnBsYXllckluZm8ucGxheWVySWQsXHJcbiAgICAgICAgICAgICAgICBnYW1ldHlwZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIHNpZ246IHRoaXMucGxheWVySW5mby5nYW1lU2lnblxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuc29ja2V0Lm9uKCdsb2dpbkdhbWVSZXN1bHQnLCBkYXRhID0+IHtcclxuICAgICAgICAgICAgZGF0YSA9IHRoaXMuY2hhbmdlUmVzdWx0SlNPTl9GdW5jdGlvbihkYXRhKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ0xvZ2luR2FtZVJlc3VsdDonLCBkYXRhKTtcclxuICAgICAgICAgICAgdGhpcy5zb2NrZXQuZW1pdCgnTG9naW5Sb29tJyk7XHJcbiAgICAgICAgICAgIHRoaXMubWFpbk9iai5teUNvaW4gPSBkYXRhLk9iai5zY29yZTtcclxuICAgICAgICAgICAgdGhpcy5tYWluT2JqLnVzZXJDb2luLnN0cmluZyA9IChkYXRhLk9iai5zY29yZSAvIDEwMCkudG9GaXhlZCgyKTtcclxuICAgICAgICAgICAgdGhpcy5tYWluT2JqLnVzZXJOYW1lLnN0cmluZyA9IGRhdGEuT2JqLm5pY2tuYW1lO1xyXG4gICAgICAgICAgICBIZWxwZXIubG9hZEhlYWQoZGF0YS5PYmouaGVhZGltZ3VybCwgdGV4dHVyZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1haW5PYmoudXNlckhlYWQuc3ByaXRlRnJhbWUgPSB0ZXh0dXJlO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB3aW5kb3cuQkxBQ0tKQUNLX0xPQkJZTkVULmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5zb2NrZXQub24oJ0xvZ2luUm9vbVJlc3VsdCcsIChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIGRhdGEgPSB0aGlzLmNoYW5nZVJlc3VsdEpTT05fRnVuY3Rpb24oZGF0YSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdMb2dpblJvb21SZXN1bHQnLCBkYXRhKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5zb2NrZXQub24oJ2xvdHRlcnlSZXN1bHQnLCAoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICBkYXRhID0gdGhpcy5jaGFuZ2VSZXN1bHRKU09OX0Z1bmN0aW9uKGRhdGEpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnbG90dGVyeVJlc3VsdDonLCBkYXRhKTtcclxuICAgICAgICAgICAgaWYgKCEhZGF0YS5SZXN1bHRDb2RlICYmIGRhdGEuUmVzdWx0Q29kZSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1haW5PYmouYmV0Q2FsbEJhY2soKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFpbk9iai5maXJzdERlYWwoZGF0YS56aHVhbmdfY2FyZFswXSwgJycsIC4uLmRhdGEuaGFuZF9jYXJkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWRhdGEuaXNfb3Zlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZU9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFpbk9iai5wbGF5ZXJTdGF0dXMoZGF0YS5xX3NhZmUgPyAxIDogMik7XHJcbiAgICAgICAgICAgICAgICB9LCAxLjIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYWluT2JqLm92ZXJBY3Rpb24oZGF0YS56aHVhbmdfY2FyZCwgZGF0YS53aW5fcmVzLCBkYXRhLnVzZXJfc2NvcmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuc29ja2V0Lm9uKCdzZW5kQ2FyZFJlc3VsdCcsIChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIGRhdGEgPSB0aGlzLmNoYW5nZVJlc3VsdEpTT05fRnVuY3Rpb24oZGF0YSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzZW5kQ2FyZFJlc3VsdCcsIGRhdGEpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tYWluT2JqLnBsYXllckNhcmROb2RlLmNoaWxkcmVuLmxlbmd0aCAhPSBkYXRhLmhhbmRfY2FyZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFpbk9iai5kZWFsKCcnLCBkYXRhLmhhbmRfY2FyZFtkYXRhLmhhbmRfY2FyZC5sZW5ndGggLSAxXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkYXRhLmlzX2ZhbmJlaSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYWluT2JqLnJvbGxDb2luKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1haW5PYmoubXlDb2luID0gdGhpcy5tYWluT2JqLm15Q29pbiAtIHRoaXMubWFpbk9iai5iZXQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1haW5PYmoudXNlckNvaW4uc3RyaW5nID0gKHRoaXMubWFpbk9iai5teUNvaW4gLyAxMDApLnRvRml4ZWQoMik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1haW5PYmoubXlDaGlwc0xibC5zdHJpbmcgPSAodGhpcy5tYWluT2JqLmJldCAqIDIgLyAxMDApLnRvRml4ZWQoMik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghZGF0YS5pc19vdmVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYWluT2JqLnBsYXllclN0YXR1cygzKTtcclxuICAgICAgICAgICAgICAgIH0sIDAuMyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1haW5PYmoub3ZlckFjdGlvbihkYXRhLnpodWFuZ19jYXJkLCBkYXRhLndpbl9yZXMsIGRhdGEudXNlcl9zY29yZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5zb2NrZXQub24oJ2J1eVNhZmVSZXN1bHQnLCAoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICBkYXRhID0gdGhpcy5jaGFuZ2VSZXN1bHRKU09OX0Z1bmN0aW9uKGRhdGEpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnYnV5U2FmZVJlc3VsdCcsIGRhdGEpO1xyXG4gICAgICAgICAgICB0aGlzLm1haW5PYmoucGxheWVyU3RhdHVzKDIpO1xyXG4gICAgICAgICAgICB0aGlzLm1haW5PYmoucm9sbENvaW4odHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMubWFpbk9iai5teUNvaW4gPSB0aGlzLm1haW5PYmoubXlDb2luIC0gdGhpcy5tYWluT2JqLmJldCAvIDI7XHJcbiAgICAgICAgICAgIHRoaXMubWFpbk9iai51c2VyQ29pbi5zdHJpbmcgPSAodGhpcy5tYWluT2JqLm15Q29pbiAvIDEwMCkudG9GaXhlZCgyKTtcclxuICAgICAgICAgICAgdGhpcy5tYWluT2JqLm15Q2hpcHNMYmwuc3RyaW5nID0gKHRoaXMubWFpbk9iai5iZXQgKiAxLjUgLyAxMDApLnRvRml4ZWQoMik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIGNoYW5nZVJlc3VsdEpTT05fRnVuY3Rpb24ocmV0KSB7XHJcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShyZXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfSxcclxufSk7Il19