
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Fish_haiwang2/haiwang2BulletCtrl.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '428d1RXlFBNkYmR70syzVVw', 'haiwang2BulletCtrl');
// Script/Fish_haiwang2/haiwang2BulletCtrl.js

"use strict";

var bulletJL = {
  '1': 0,
  '2': 1,
  '3': 2,
  '4': 3,
  '5': 4
};
var speedJL = {
  '1': 5,
  '2': 5,
  '3': 5,
  '4': 5,
  '5': 5
};
cc.Class({
  "extends": cc.Component,
  properties: {
    spList: [cc.SpriteFrame] //炮弹sp

  },
  init: function init(fishMain, seatId, pos, angle, roombet) {
    this.fishMain = fishMain;
    this.seatId = seatId;
    this.speed = speedJL[roombet + ''];
    this.getComponent(cc.Sprite).spriteFrame = this.spList[bulletJL[roombet + '']];
    this.node.position = pos; // this.node.rotation = angle;

    this.node.angle = -angle;
    this.roomBet = roombet;
  },
  update: function update(dt) {
    this.node.x += speedJL[this.roomBet] * Math.sin(-2 * Math.PI / 360 * this.node.angle);
    this.node.y += speedJL[this.roomBet] * Math.cos(-2 * Math.PI / 360 * this.node.angle); //边界检测 处理子弹反弹

    if (this.node.x > 667) {
      this.node.angle = 360 - this.node.angle;
      this.node.x = 667;
    } else if (this.node.x < -667) {
      this.node.angle = 360 - this.node.angle;
      this.node.x = -667;
    } else if (this.node.y > 375) {
      this.node.angle = 180 - this.node.angle;
      this.node.y = 375;
    } else if (this.node.y < -375) {
      this.node.angle = 180 - this.node.angle;
      this.node.y = -375;
    }
  },
  onCollisionEnter: function onCollisionEnter(other, self) {
    var _this = this;

    //渔网
    var com = self.node.getComponent("haiwang2BulletCtrl");
    var fishNode = other.node;
    var fishsc = fishNode.getComponent("Fishhaiwang2");

    if (this.fishMain.isLockFish && com.autoId != fishsc.fishId && this.fishMain.checkFishId(com.autoId)) {
      return;
    }

    var _loop = function _loop() {
      var net = _this.fishMain.getNet();

      net.parent = _this.fishMain.netBg;
      net.scale = 2; // net.position = other.node.position;

      point = cc.v2(_this.node.x + other.node.width / 2 * Math.sin(-2 * Math.PI / 360 * _this.node.angle), _this.node.y + other.node.height / 2 * Math.cos(-2 * Math.PI / 360 * _this.node.angle));
      net.getComponent(cc.Animation).play();

      if (index == 0) {// point.x += 50 * Math.sin(-2 * Math.PI / 360 * this.node.angle);
        // point.y += 50 * Math.cos(2 * Math.PI / 360 * this.node.angle);
      } else if (index == 1) {
        point.x += 50 * Math.sin(-2 * Math.PI / 360 * (_this.node.angle + 120));
        point.y += 50 * Math.cos(2 * Math.PI / 360 * (_this.node.angle + 120));
      } else if (index == 2) {
        point.x += 50 * Math.sin(-2 * Math.PI / 360 * (_this.node.angle + 240));
        point.y += 50 * Math.cos(-2 * Math.PI / 360 * (_this.node.angle + 240));
      }

      net.position = point;
      net.runAction(cc.sequence(cc.delayTime(1.5), cc.callFunc(function () {
        _this.fishMain.netPool.put(net);
      })));
    };

    for (var index = 0; index < 1; index++) {
      var point;

      _loop();
    }

    playEffect('open_net');
    this.fishMain.bulletPool.put(this.node);

    var ac = this._getActionByTag(257, fishNode);

    if (!ac) {
      ac = cc.sequence(cc.tintTo(0.2, 50, 50, 50), cc.tintTo(0.2, 255, 255, 255), cc.tintTo(0.2, 50, 50, 50), cc.tintTo(0.2, 255, 255, 255));
      ac.setTag(257);
      fishNode.runAction(ac);
    } //this.node.removeComponent(cc.CircleCollider);


    var playerinfo = require("PlayerInfo").getInstant;

    var fishNet = require("./Fishhaiwang2NetWork").getInstant;

    var mes = {
      fishId: fishsc.fishId,
      //fishInfo.fishId[0],
      bulletId: self.node.getComponent("haiwang2BulletCtrl").bulletId,
      //sendId: self.node.getComponent("haiwang2BulletCtrl").userID,
      uid: self.node.getComponent("haiwang2BulletCtrl").userID
    };

    if (false) //(self.node.getComponent("haiwang2BulletCtrl").userID == playerinfo.playerId)
      {
        fishNet.fishSocket.emit('fishHit_board', JSON.stringify(mes));
      } else {
      fishNet.fishSocket.emit('fishHit', JSON.stringify(mes));
    }
  },
  _getActionByTag: function _getActionByTag(tag, target) {
    tag === cc.Action.TAG_INVALID && cc.logID(1004);

    var element = cc.director.getActionManager()._hashTargets[target._id];

    if (element) {
      if (null != element.actions) for (var i = 0; i < element.actions.length; ++i) {
        var action = element.actions[i];
        if (action && action.getTag() === tag) return action;
      }
    }

    return null;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxGaXNoX2hhaXdhbmcyXFxoYWl3YW5nMkJ1bGxldEN0cmwuanMiXSwibmFtZXMiOlsiYnVsbGV0SkwiLCJzcGVlZEpMIiwiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJzcExpc3QiLCJTcHJpdGVGcmFtZSIsImluaXQiLCJmaXNoTWFpbiIsInNlYXRJZCIsInBvcyIsImFuZ2xlIiwicm9vbWJldCIsInNwZWVkIiwiZ2V0Q29tcG9uZW50IiwiU3ByaXRlIiwic3ByaXRlRnJhbWUiLCJub2RlIiwicG9zaXRpb24iLCJyb29tQmV0IiwidXBkYXRlIiwiZHQiLCJ4IiwiTWF0aCIsInNpbiIsIlBJIiwieSIsImNvcyIsIm9uQ29sbGlzaW9uRW50ZXIiLCJvdGhlciIsInNlbGYiLCJjb20iLCJmaXNoTm9kZSIsImZpc2hzYyIsImlzTG9ja0Zpc2giLCJhdXRvSWQiLCJmaXNoSWQiLCJjaGVja0Zpc2hJZCIsIm5ldCIsImdldE5ldCIsInBhcmVudCIsIm5ldEJnIiwic2NhbGUiLCJwb2ludCIsInYyIiwid2lkdGgiLCJoZWlnaHQiLCJBbmltYXRpb24iLCJwbGF5IiwiaW5kZXgiLCJydW5BY3Rpb24iLCJzZXF1ZW5jZSIsImRlbGF5VGltZSIsImNhbGxGdW5jIiwibmV0UG9vbCIsInB1dCIsInBsYXlFZmZlY3QiLCJidWxsZXRQb29sIiwiYWMiLCJfZ2V0QWN0aW9uQnlUYWciLCJ0aW50VG8iLCJzZXRUYWciLCJwbGF5ZXJpbmZvIiwicmVxdWlyZSIsImdldEluc3RhbnQiLCJmaXNoTmV0IiwibWVzIiwiYnVsbGV0SWQiLCJ1aWQiLCJ1c2VySUQiLCJmaXNoU29ja2V0IiwiZW1pdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0YWciLCJ0YXJnZXQiLCJBY3Rpb24iLCJUQUdfSU5WQUxJRCIsImxvZ0lEIiwiZWxlbWVudCIsImRpcmVjdG9yIiwiZ2V0QWN0aW9uTWFuYWdlciIsIl9oYXNoVGFyZ2V0cyIsIl9pZCIsImFj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RSxFQUFFLENBQUMyRSxNQUFILENBQVVDLFdBQWxCLElBQWlDNUUsRUFBRSxDQUFDNkUsS0FBSCxDQUFTLElBQVQsQ0FBakM7O0FBQ0EsUUFBSUMsT0FBTyxHQUFHOUUsRUFBRSxDQUFDK0UsUUFBSCxDQUFZQyxnQkFBWixHQUErQkMsWUFBL0IsQ0FBNENQLE1BQU0sQ0FBQ1EsR0FBbkQsQ0FBZDs7QUFDQSxRQUFJSixPQUFKLEVBQWE7QUFDVCxVQUFJLFFBQVFBLE9BQU8sQ0FBQ0ssT0FBcEIsRUFBNkIsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHTixPQUFPLENBQUNLLE9BQVIsQ0FBZ0JFLE1BQXBDLEVBQTRDLEVBQUVELENBQTlDLEVBQWlEO0FBQzFFLFlBQUlFLE1BQU0sR0FBR1IsT0FBTyxDQUFDSyxPQUFSLENBQWdCQyxDQUFoQixDQUFiO0FBQ0EsWUFBSUUsTUFBTSxJQUFJQSxNQUFNLENBQUNDLE1BQVAsT0FBb0JkLEdBQWxDLEVBQXVDLE9BQU9hLE1BQVA7QUFDMUM7QUFDSjs7QUFDRCxXQUFPLElBQVA7QUFDSDtBQXpISSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBidWxsZXRKTCA9IHtcclxuICAgICcxJzogMCxcclxuICAgICcyJzogMSxcclxuICAgICczJzogMixcclxuICAgICc0JzogMyxcclxuICAgICc1JzogNFxyXG59O1xyXG5cclxuY29uc3Qgc3BlZWRKTCA9IHtcclxuICAgICcxJzogNSxcclxuICAgICcyJzogNSxcclxuICAgICczJzogNSxcclxuICAgICc0JzogNSxcclxuICAgICc1JzogNVxyXG59O1xyXG5cclxuY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxyXG5cclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICBzcExpc3Q6IFtjYy5TcHJpdGVGcmFtZV0sIC8v54Ku5by5c3BcclxuICAgIH0sXHJcblxyXG4gICAgaW5pdChmaXNoTWFpbiwgc2VhdElkLCBwb3MsIGFuZ2xlLCByb29tYmV0KSB7XHJcbiAgICAgICAgdGhpcy5maXNoTWFpbiA9IGZpc2hNYWluO1xyXG4gICAgICAgIHRoaXMuc2VhdElkID0gc2VhdElkO1xyXG4gICAgICAgIHRoaXMuc3BlZWQgPSBzcGVlZEpMW3Jvb21iZXQgKyAnJ107XHJcbiAgICAgICAgdGhpcy5nZXRDb21wb25lbnQoY2MuU3ByaXRlKS5zcHJpdGVGcmFtZSA9IHRoaXMuc3BMaXN0W2J1bGxldEpMW3Jvb21iZXQgKyAnJ11dO1xyXG4gICAgICAgIHRoaXMubm9kZS5wb3NpdGlvbiA9IHBvcztcclxuICAgICAgICAvLyB0aGlzLm5vZGUucm90YXRpb24gPSBhbmdsZTtcclxuICAgICAgICB0aGlzLm5vZGUuYW5nbGUgPSAtYW5nbGU7XHJcbiAgICAgICAgdGhpcy5yb29tQmV0ID0gcm9vbWJldDtcclxuICAgIH0sXHJcblxyXG4gICAgdXBkYXRlKGR0KSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLnggKz0gc3BlZWRKTFt0aGlzLnJvb21CZXRdICogTWF0aC5zaW4oLTIgKiBNYXRoLlBJIC8gMzYwICogdGhpcy5ub2RlLmFuZ2xlKTtcclxuICAgICAgICB0aGlzLm5vZGUueSArPSBzcGVlZEpMW3RoaXMucm9vbUJldF0gKiBNYXRoLmNvcygtMiAqIE1hdGguUEkgLyAzNjAgKiB0aGlzLm5vZGUuYW5nbGUpO1xyXG4gICAgICAgIC8v6L6555WM5qOA5rWLIOWkhOeQhuWtkOW8ueWPjeW8uVxyXG4gICAgICAgIGlmICh0aGlzLm5vZGUueCA+IDY2Nykge1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUuYW5nbGUgPSAzNjAgLSB0aGlzLm5vZGUuYW5nbGU7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS54ID0gNjY3O1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5ub2RlLnggPCAtNjY3KSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5hbmdsZSA9IDM2MCAtIHRoaXMubm9kZS5hbmdsZTtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLnggPSAtNjY3O1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5ub2RlLnkgPiAzNzUpIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLmFuZ2xlID0gMTgwIC0gdGhpcy5ub2RlLmFuZ2xlO1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUueSA9IDM3NTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubm9kZS55IDwgLTM3NSkge1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUuYW5nbGUgPSAxODAgLSB0aGlzLm5vZGUuYW5nbGU7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS55ID0gLTM3NTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIG9uQ29sbGlzaW9uRW50ZXI6IGZ1bmN0aW9uIChvdGhlciwgc2VsZikge1xyXG4gICAgICAgIC8v5riU572RXHJcblxyXG4gICAgICAgIHZhciBjb20gPSBzZWxmLm5vZGUuZ2V0Q29tcG9uZW50KFwiaGFpd2FuZzJCdWxsZXRDdHJsXCIpO1xyXG5cclxuICAgICAgICB2YXIgZmlzaE5vZGUgPSBvdGhlci5ub2RlO1xyXG4gICAgICAgIHZhciBmaXNoc2MgPSBmaXNoTm9kZS5nZXRDb21wb25lbnQoXCJGaXNoaGFpd2FuZzJcIik7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmZpc2hNYWluLmlzTG9ja0Zpc2ggJiYgY29tLmF1dG9JZCAhPSBmaXNoc2MuZmlzaElkICYmIHRoaXMuZmlzaE1haW4uY2hlY2tGaXNoSWQoY29tLmF1dG9JZCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgMTsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICBsZXQgbmV0ID0gdGhpcy5maXNoTWFpbi5nZXROZXQoKTtcclxuICAgICAgICAgICAgbmV0LnBhcmVudCA9IHRoaXMuZmlzaE1haW4ubmV0Qmc7XHJcbiAgICAgICAgICAgIG5ldC5zY2FsZSA9IDI7XHJcbiAgICAgICAgICAgIC8vIG5ldC5wb3NpdGlvbiA9IG90aGVyLm5vZGUucG9zaXRpb247XHJcbiAgICAgICAgICAgIHZhciBwb2ludCA9IGNjLnYyKFxyXG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlLnggKyBvdGhlci5ub2RlLndpZHRoIC8gMiAqIE1hdGguc2luKC0yICogTWF0aC5QSSAvIDM2MCAqIHRoaXMubm9kZS5hbmdsZSksXHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGUueSArIG90aGVyLm5vZGUuaGVpZ2h0IC8gMiAqIE1hdGguY29zKC0yICogTWF0aC5QSSAvIDM2MCAqIHRoaXMubm9kZS5hbmdsZSlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgbmV0LmdldENvbXBvbmVudChjYy5BbmltYXRpb24pLnBsYXkoKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID09IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIHBvaW50LnggKz0gNTAgKiBNYXRoLnNpbigtMiAqIE1hdGguUEkgLyAzNjAgKiB0aGlzLm5vZGUuYW5nbGUpO1xyXG4gICAgICAgICAgICAgICAgLy8gcG9pbnQueSArPSA1MCAqIE1hdGguY29zKDIgKiBNYXRoLlBJIC8gMzYwICogdGhpcy5ub2RlLmFuZ2xlKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBwb2ludC54ICs9IDUwICogTWF0aC5zaW4oLTIgKiBNYXRoLlBJIC8gMzYwICogKHRoaXMubm9kZS5hbmdsZSArIDEyMCkpO1xyXG4gICAgICAgICAgICAgICAgcG9pbnQueSArPSA1MCAqIE1hdGguY29zKDIgKiBNYXRoLlBJIC8gMzYwICogKHRoaXMubm9kZS5hbmdsZSArIDEyMCkpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09IDIpIHtcclxuICAgICAgICAgICAgICAgIHBvaW50LnggKz0gNTAgKiBNYXRoLnNpbigtMiAqIE1hdGguUEkgLyAzNjAgKiAodGhpcy5ub2RlLmFuZ2xlICsgMjQwKSk7XHJcbiAgICAgICAgICAgICAgICBwb2ludC55ICs9IDUwICogTWF0aC5jb3MoLTIgKiBNYXRoLlBJIC8gMzYwICogKHRoaXMubm9kZS5hbmdsZSArIDI0MCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBuZXQucG9zaXRpb24gPSBwb2ludDtcclxuXHJcbiAgICAgICAgICAgIG5ldC5ydW5BY3Rpb24oY2Muc2VxdWVuY2UoXHJcbiAgICAgICAgICAgICAgICBjYy5kZWxheVRpbWUoMS41KSxcclxuICAgICAgICAgICAgICAgIGNjLmNhbGxGdW5jKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpc2hNYWluLm5ldFBvb2wucHV0KG5ldCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcGxheUVmZmVjdCgnb3Blbl9uZXQnKTtcclxuXHJcbiAgICAgICAgdGhpcy5maXNoTWFpbi5idWxsZXRQb29sLnB1dCh0aGlzLm5vZGUpO1xyXG5cclxuXHJcbiAgICAgICAgdmFyIGFjID0gdGhpcy5fZ2V0QWN0aW9uQnlUYWcoMjU3LCBmaXNoTm9kZSk7XHJcbiAgICAgICAgaWYgKCFhYykge1xyXG4gICAgICAgICAgICBhYyA9IGNjLnNlcXVlbmNlKGNjLnRpbnRUbygwLjIsIDUwLCA1MCwgNTApLCBjYy50aW50VG8oMC4yLCAyNTUsIDI1NSwgMjU1KSwgY2MudGludFRvKDAuMiwgNTAsIDUwLCA1MCksIGNjLnRpbnRUbygwLjIsIDI1NSwgMjU1LCAyNTUpKTtcclxuICAgICAgICAgICAgYWMuc2V0VGFnKDI1Nyk7XHJcbiAgICAgICAgICAgIGZpc2hOb2RlLnJ1bkFjdGlvbihhYyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL3RoaXMubm9kZS5yZW1vdmVDb21wb25lbnQoY2MuQ2lyY2xlQ29sbGlkZXIpO1xyXG5cclxuICAgICAgICB2YXIgcGxheWVyaW5mbyA9IHJlcXVpcmUoXCJQbGF5ZXJJbmZvXCIpLmdldEluc3RhbnQ7XHJcblxyXG4gICAgICAgIHZhciBmaXNoTmV0ID0gcmVxdWlyZShcIi4vRmlzaGhhaXdhbmcyTmV0V29ya1wiKS5nZXRJbnN0YW50O1xyXG4gICAgICAgIHZhciBtZXMgPSB7XHJcbiAgICAgICAgICAgIGZpc2hJZDogZmlzaHNjLmZpc2hJZCwvL2Zpc2hJbmZvLmZpc2hJZFswXSxcclxuICAgICAgICAgICAgYnVsbGV0SWQ6IHNlbGYubm9kZS5nZXRDb21wb25lbnQoXCJoYWl3YW5nMkJ1bGxldEN0cmxcIikuYnVsbGV0SWQsXHJcbiAgICAgICAgICAgIC8vc2VuZElkOiBzZWxmLm5vZGUuZ2V0Q29tcG9uZW50KFwiaGFpd2FuZzJCdWxsZXRDdHJsXCIpLnVzZXJJRCxcclxuICAgICAgICAgICAgdWlkOiBzZWxmLm5vZGUuZ2V0Q29tcG9uZW50KFwiaGFpd2FuZzJCdWxsZXRDdHJsXCIpLnVzZXJJRCxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChmYWxzZSkvLyhzZWxmLm5vZGUuZ2V0Q29tcG9uZW50KFwiaGFpd2FuZzJCdWxsZXRDdHJsXCIpLnVzZXJJRCA9PSBwbGF5ZXJpbmZvLnBsYXllcklkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZmlzaE5ldC5maXNoU29ja2V0LmVtaXQoJ2Zpc2hIaXRfYm9hcmQnLCBKU09OLnN0cmluZ2lmeShtZXMpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmaXNoTmV0LmZpc2hTb2NrZXQuZW1pdCgnZmlzaEhpdCcsIEpTT04uc3RyaW5naWZ5KG1lcykpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgX2dldEFjdGlvbkJ5VGFnOiBmdW5jdGlvbiAodGFnLCB0YXJnZXQpIHtcclxuICAgICAgICB0YWcgPT09IGNjLkFjdGlvbi5UQUdfSU5WQUxJRCAmJiBjYy5sb2dJRCgxMDA0KTtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IGNjLmRpcmVjdG9yLmdldEFjdGlvbk1hbmFnZXIoKS5faGFzaFRhcmdldHNbdGFyZ2V0Ll9pZF07XHJcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgaWYgKG51bGwgIT0gZWxlbWVudC5hY3Rpb25zKSBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnQuYWN0aW9ucy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IGVsZW1lbnQuYWN0aW9uc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gJiYgYWN0aW9uLmdldFRhZygpID09PSB0YWcpIHJldHVybiBhY3Rpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9LFxyXG5cclxufSk7Il19