{"version":3,"sources":["assets\\Script\\senlinwuhui\\SH_Network.js"],"names":["cc","Class","Component","onLoad","playerInfo","require","getInstant","gameMain","node","getComponent","sign","gameSign","userId","playerId","port","timer","sys","isNative","socket","SocketIO","connect","Lhjconfig","Server_IP","registEvent","on","ret","log","emit","JSON","stringify","userid","gametype","result","changeResultJSON_Function","XYZB_LOBBYNET","disconnect","resultid","userName","Obj","nickname","userCoin","score","headUrl","headimgurl","gameTime","colorList","game_color_list","showInfo","loginInitColor","showNextTime","msg","betList","game_odd","Date","getTime","startBets","ResultCode","getResult","console","index","i","otherOdd","j","rfOdds","historyList","historyNode","children","active","game_record","length","color","win_color","aid","win_card","sp","redAnimSp","greenAnimSp","yellowAnimSp","Sprite","spriteFrame","closeBets","parse"],"mappings":"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","sourceRoot":"/","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    onLoad() {\r\n        this.playerInfo = require(\"PlayerInfo\").getInstant;\r\n        this.gameMain = this.node.getComponent('SH_Main');\r\n        this.sign = this.playerInfo.gameSign;\r\n        this.userId = this.playerInfo.playerId;\r\n        this.port = ':15201';\r\n        this.timer = 0;\r\n        //连接网络\r\n        if (cc.sys.isNative) {\r\n            this.socket = SocketIO.connect(Lhjconfig.Server_IP + this.port);\r\n        } else {\r\n            let socket = require(\"socket-io\");\r\n            this.socket = socket(Lhjconfig.Server_IP + this.port);\r\n        }\r\n        this.registEvent();\r\n    },\r\n    //BetPool\r\n    registEvent() {\r\n        this.socket.on(\"connected\", ret => {\r\n            cc.log('connected:' + ret);\r\n            if (ret) {\r\n                this.socket.emit(\"LoginGame\", JSON.stringify({\r\n                    userid: this.userId, //用户ID\r\n                    gametype: 11, //游戏类型\r\n                    sign: this.sign //签名\r\n                }));\r\n            }\r\n        });\r\n\r\n        this.socket.on(\"loginGameResult\", ret => {\r\n            let result = this.changeResultJSON_Function(ret);\r\n            cc.log('游戏登陆成功=======================' + JSON.stringify(result));\r\n            XYZB_LOBBYNET.disconnect();\r\n            if (result.resultid) { //游戏登录成功\r\n                this.userName = result.Obj.nickname;\r\n                this.userCoin = result.Obj.score / 100;\r\n                this.headUrl = result.Obj.headimgurl;\r\n                this.gameTime = result.Obj.gameTime;\r\n                this.gameMain.colorList = [...result.game_color_list];\r\n                this.gameMain.showInfo();\r\n                this.gameMain.loginInitColor();\r\n                this.gameMain.showNextTime();\r\n                this.socket.emit('getGameRecord');\r\n            } else {\r\n                cc.log(result.msg);\r\n            }\r\n        });\r\n\r\n        this.socket.on(\"BetStart\", ret => {\r\n            let result = this.changeResultJSON_Function(ret);\r\n            cc.log('BetStart:', result);\r\n            this.gameMain.colorList = [...result.game_color_list];\r\n            this.gameMain.betList = [...result.game_odd];\r\n            this.socket.emit('getGameRecord');\r\n            this.timer = new Date().getTime() / 1000;\r\n            this.gameMain.startBets();\r\n        });\r\n\r\n        this.socket.on(\"OpenWinResult\", ret => {\r\n            cc.log('OpenWinResult:', ret);\r\n            let result = this.changeResultJSON_Function(ret);\r\n            if (result.ResultCode) {\r\n                this.userCoin = result.score / 100;\r\n                this.gameMain.getResult(result);\r\n            }\r\n        });\r\n\r\n        this.socket.on(\"lotteryResult\", ret => {\r\n            cc.log('lotteryResult:', ret);\r\n        });\r\n\r\n        this.socket.on(\"BetPool\", ret => {\r\n            let result = this.changeResultJSON_Function(ret);\r\n            console.log('BetPool' + JSON.stringify(result));\r\n            let index = 0;\r\n            for (let i in this.gameMain.otherOdd) {\r\n                for (let j in this.gameMain.otherOdd[i]) {\r\n                    this.gameMain.otherOdd[i][j] = result.result[index];\r\n                    index++;\r\n                }\r\n            }\r\n            this.gameMain.rfOdds();\r\n        });\r\n\r\n        this.socket.on(\"getGameRecordResult\", ret => {\r\n            cc.log('getGameRecordResult:', ret);\r\n            let result = this.changeResultJSON_Function(ret);\r\n            let historyList = this.gameMain.historyNode.children;\r\n            for (let i in historyList) {\r\n                historyList[i].active = false;\r\n            }\r\n            if (result.game_record.length > 0) {\r\n                for (let i in result.game_record) {\r\n                    let color = result.game_record[i].win_color;\r\n                    let aid = result.game_record[i].win_card;\r\n                    let sp = null;\r\n                    if (color == 0) {\r\n                        sp = this.gameMain.redAnimSp[aid];\r\n                    } else if (color == 1) {\r\n                        sp = this.gameMain.greenAnimSp[aid];\r\n                    } else if (color == 2) {\r\n                        sp = this.gameMain.yellowAnimSp[aid];\r\n                    }\r\n                    let j = result.game_record.length - 1 - i;\r\n                    historyList[j].active = true;\r\n                    historyList[j].getComponent(cc.Sprite).spriteFrame = sp;\r\n                }\r\n            }\r\n        });\r\n\r\n        this.socket.on(\"BetStop\", ret => {\r\n            cc.log('BetStop:', ret);\r\n            this.gameMain.closeBets();\r\n        });\r\n    },\r\n\r\n    changeResultJSON_Function(ret) {\r\n        if (cc.sys.isNative) {\r\n            return JSON.parse(ret);\r\n        }\r\n        return ret;\r\n    },\r\n});"]}