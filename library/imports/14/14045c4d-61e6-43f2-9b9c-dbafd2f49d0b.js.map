{"version":3,"sources":["assets\\scripts\\three_languages\\set_languages\\send_verfication.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class send_verfication extends cc.Component {\r\n    @property({ type: cc.Label, tooltip: '顾客手机号' })\r\n    cur_phone: cc.Label;\r\n\r\n    @property({ type: cc.Label, tooltip: '顾客给的验证码' })\r\n    cur_verficat: cc.Label;\r\n\r\n    @property({ type: cc.Label, tooltip: '验证码按钮显示倒计时' })\r\n    verficat_but: cc.Label;\r\n\r\n    private countdownRunning: boolean = false; // 倒计时是否正在进行中\r\n    private isRegistered: boolean = false;\r\n\r\n    /**\r\n     * 60秒倒计时\r\n     */\r\n    countdown() {\r\n        if (this.countdownRunning) {\r\n            return; // 如果倒计时正在进行中，则直接返回，不执行倒计时逻辑\r\n        }\r\n\r\n        this.countdownRunning = true; // 将倒计时标记为正在进行中\r\n\r\n        let count = 60;\r\n        const labelComponent = this.verficat_but;\r\n\r\n        const intervalId = setInterval(() => {\r\n            if (count === 1) {\r\n                labelComponent.string = '发送手机验证码';\r\n                clearInterval(intervalId);\r\n\r\n                // 模拟向服务器发送请求获取验证码\r\n                const phoneNumber = this.cur_phone.string;\r\n                this.sendVerificationCodeRequest(phoneNumber)\r\n                    .then((verificationCode) => {\r\n                        // 验证码校验\r\n                        const isValidVerification = verificationCode === this.cur_verficat.string;\r\n                        if (isValidVerification) {\r\n                            // 验证码正确\r\n                            console.log('验证码正确');\r\n                            this.isRegistered = true;\r\n                        } else {\r\n                            // 验证码错误\r\n                            console.log('验证码错误');\r\n                            this.isRegistered = false;\r\n                        }\r\n\r\n                        this.countdownRunning = false; // 倒计时结束，标记为非进行中\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error('发送验证码请求出错:', error);\r\n                        this.isRegistered = false; // 请求出错，将注册状态标记为false\r\n                        this.countdownRunning = false; // 倒计时结束，标记为非进行中\r\n                    });\r\n\r\n                return;\r\n            }\r\n\r\n            labelComponent.string = String(count);\r\n            count--;\r\n        }, 1000);\r\n    }\r\n\r\n\r\n    // 模拟向服务器发送请求获取验证码的方法\r\n    sendVerificationCodeRequest(phoneNumber: string): Promise<string> {\r\n        // 这里模拟一个异步请求，使用Promise来模拟请求的异步性质\r\n        return new Promise<string>((resolve, reject) => {\r\n            // 这里可以执行向服务器发送请求的逻辑，比如使用axios库发送POST请求\r\n            // 实际情况需要替换为真实的请求逻辑\r\n            setTimeout(() => {\r\n                const verificationCode = \"123456\"; // 这里简单返回一个固定的验证码示例\r\n                resolve(verificationCode); // 请求成功，将验证码传递给回调函数\r\n            }, 2000); // 这里使用setTimeout模拟异步请求的延迟时间\r\n        });\r\n    }\r\n\r\n    ReturnRegistered() {\r\n        return this.isRegistered;\r\n    }\r\n}\r\n"]}