{"version":3,"sources":["assets\\LaoHuJi\\module\\i18n\\i18n.js"],"names":["Polyglot","require","lang","cc","sys","localStorage","getItem","language","data","polyglot","phrases","allowMissing","module","exports","init","replace","t","key","opt"],"mappings":";;;;;;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAIC,IAAI,GAAGC,EAAE,CAACC,GAAH,CAAOC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAAX;;AACA,IAAG,CAACJ,IAAJ,EACA;AACI,UAAOC,EAAE,CAACC,GAAH,CAAOG,QAAd;AACA,SAAK,IAAL;AACH;AACGL,MAAAA,IAAI,GAAG,IAAP;AACA;;AACA,SAAK,IAAL;AACAA,MAAAA,IAAI,GAAG,IAAP;AACA;;AACA,SAAK,IAAL;AACAA,MAAAA,IAAI,GAAG,IAAP;AACA;;AACH,SAAK,IAAL;AACGA,MAAAA,IAAI,GAAG,IAAP;AACA;;AACH,SAAK,IAAL;AACGA,MAAAA,IAAI,GAAG,IAAP;AACA;;AACH,SAAK,IAAL;AACGA,MAAAA,IAAI,GAAG,IAAP;AACA;;AACH,SAAK,IAAL;AACGA,MAAAA,IAAI,GAAG,IAAP;AACA;;AACH,SAAK,IAAL;AACGA,MAAAA,IAAI,GAAG,IAAP;AACA;;AACH,SAAK,IAAL;AACGA,MAAAA,IAAI,GAAG,IAAP;AACA;;AACH,SAAK,IAAL;AACGA,MAAAA,IAAI,GAAG,IAAP;AACA;AA/BA;AAiCH;;AACD,IAAIM,IAAI,GAAGP,OAAO,CAACC,IAAD,CAAlB,EAA0B;AAC1B;;;AACA,IAAIO,QAAQ,GAAG,IAAIT,QAAJ,CAAa;AAACU,EAAAA,OAAO,EAAEF,IAAV;AAAgBG,EAAAA,YAAY,EAAE;AAA9B,CAAb,CAAf;AAGAC,MAAM,CAACC,OAAP,GAAiB;AACb;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,IAPa,gBAOPP,QAPO,EAOG;AACZL,IAAAA,IAAI,GAAGK,QAAP;AACAC,IAAAA,IAAI,GAAGP,OAAO,CAACC,IAAD,CAAd;AACAO,IAAAA,QAAQ,CAACM,OAAT,CAAiBP,IAAjB;AACH,GAXY;;AAYb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIQ,EAAAA,CA1Ba,aA0BVC,GA1BU,EA0BLC,GA1BK,EA0BA;AACT,WAAOT,QAAQ,CAACO,CAAT,CAAWC,GAAX,EAAgBC,GAAhB,CAAP;AACH;AA5BY,CAAjB","sourceRoot":"/","sourcesContent":["const Polyglot = require('polyglot');\nlet lang = cc.sys.localStorage.getItem('language');\nif(!lang)\n{\n    switch(cc.sys.language){\n    case 'zh':\n\tdefault:\n    lang = 'zh';\n    break;\n    case 'my':\n    lang = 'my';\n    break;\n    case 'en':\n    lang = 'en';\n    break;\n\tcase 'es':\n    lang = 'es';\n    break;\n\tcase 'fr':\n    lang = 'fr';\n    break;\n\tcase 'th':\n    lang = 'th';\n    break;\n\tcase 'vn':\n    lang = 'vn';\n    break;\n\tcase 'kp':\n    lang = 'kp';\n    break;\n\tcase 'id':\n    lang = 'id';\n    break;\n\tcase 'in':\n    lang = 'in';\n    break;\n\t}\n}\nlet data = require(lang); // update this to set your default displaying language in editor\n// let polyglot = null;\nlet polyglot = new Polyglot({phrases: data, allowMissing: true});\n\n\nmodule.exports = {\n    /**\n     * This method allow you to switch language during runtime, language argument should be the same as your data file name\n     * such as when language is 'zh', it will load your 'zh.js' data source.\n     * @method init\n     * @param language - the language specific data file name, such as 'zh' to load 'zh.js'\n     */\n    init (language) {\n        lang = language;\n        data = require(lang);\n        polyglot.replace(data);\n    },\n    /**\n     * this method takes a text key as input, and return the localized string\n     * Please read https://github.com/airbnb/polyglot.js for details\n     * @method t\n     * @return {String} localized string\n     * @example\n     *\n     * var myText = i18n.t('MY_TEXT_KEY');\n     *\n     * // if your data source is defined as\n     * // {\"hello_name\": \"Hello, %{name}\"}\n     * // you can use the following to interpolate the text\n     * var greetingText = i18n.t('hello_name', {name: 'nantas'}); // Hello, nantas\n     */\n    t (key, opt) {\n        return polyglot.t(key, opt);\n    }\n};"]}